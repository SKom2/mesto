(()=>{"use strict";class e{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_showError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorClass),t.textContent=e.validationMessage}_hideError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}setButtonState(){this._toggleButtonState()}setInputValidity(){this._inputList.forEach((e=>{this._checkInputValidity(e)}))}setState(){this._toggleButtonState(),this.setInputValidity()}enableValidation(){this._setEventListeners()}}const t=document.querySelector("#button_edit"),s=document.querySelector("#button_add"),n=document.querySelector("#cardsAddForm"),i=document.querySelector("#profileEditForm"),r=(document.querySelector("#popup_photo"),{inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible"});class o{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton=this._popup.querySelector(".popup__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this.close()}))}}class a extends o{constructor(e,{callBack:t}){super(e),this._callBack=t,this._formElement=this._popup.querySelector(".form"),this._inputList=this._popup.querySelectorAll(".form__input"),this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._callBack(this._getInputValues()),this.close()}))}close(){super.close(),this._formElement&&"cardsAddForm"===this._formElement.id&&this._formElement.reset()}}class l{constructor(e,t,{handleCardClick:s}){this._name=e.name,this._link=e.link,this._templateSelector=t,this._handleCardClick=s}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_setData(){this._cardImage=this._element.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName=this._element.querySelector(".card__title"),this._cardName.textContent=this._name}_deleteCard(){this._element.remove(),this._element=null}_likeCard(){this._like=this._element.querySelector(".card__like"),this._like.classList.toggle("card__like_active")}_setEventListeners(){this._deleteButton=this._element.querySelector(".card__delete"),this._deleteButton.addEventListener("click",(()=>{this._deleteCard()})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})})),this._cardLike=this._element.querySelector(".card__like"),this._cardLike.addEventListener("click",(()=>{this._likeCard()}))}generateCard(){return this._element=this._getTemplate(),this._setData(),this._setEventListeners(),this._element}}const c=new class extends o{constructor(e){super(e),this._image=this._popup.querySelector(".popup__image"),this._title=this._popup.querySelector(".popup__title"),this.setEventListeners()}open(e){super.open(),this._image.src=e.link,this._image.alt=e.name,this._title.textContent=e.name}}("#popup_photo"),_=e=>{const t=new l(e,"#card-template",{handleCardClick:e=>{c.open(e)}}).generateCard();d.addItem(t)},d=new class{constructor({items:e,renderer:t},s){this._renderedItems=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}renderItems(){this._renderedItems.forEach(this._renderer)}}({items:[{name:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{name:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{name:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{name:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{name:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{name:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}],renderer:e=>{_(e)}},".places"),h=new a("#popup_add",{callBack:e=>{_(e)}}),u=new a("#popup_edit",{callBack:e=>{p.setUserInfo(e)}}),p=new class{constructor({nameSelector:e,aboutUserSelector:t}){this._name=document.querySelector(e),this._aboutUser=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,about:this._aboutUser.textContent}}setUserInfo(e){this._name.textContent=e.name,this._aboutUser.textContent=e.about}}({nameSelector:".profile__title",aboutUserSelector:".profile__subtitle"}),m=new e(r,n),E=new e(r,i);t.addEventListener("click",(()=>{const e=p.getUserInfo();u.setInputValues(e),u.open(),E.setState()})),s.addEventListener("click",(()=>{h.open(),m.setButtonState()})),d.renderItems(),E.enableValidation(),m.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,