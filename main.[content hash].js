(()=>{"use strict";class e{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_showError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorClass),t.textContent=e.validationMessage}_hideError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}setButtonState(){this._toggleButtonState()}setInputValidity(){this._inputList.forEach((e=>{this._checkInputValidity(e)}))}setState(){this._toggleButtonState(),this.setInputValidity()}enableValidation(){this._setEventListeners()}}const t=document.querySelector("#button_edit"),s=document.querySelector("#button_add"),i=document.querySelector(".profile__edit-avatar"),n=document.querySelector("#cardsAddForm"),r=document.querySelector("#profileEditForm"),o=document.querySelector("#avatarEditForm"),a={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible"};class l{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}_close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this._close()}setEventListeners(){this._closeButton=this._popup.querySelector(".popup__close"),this._closeButton.addEventListener("click",(()=>{this._close()})),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this._close()}))}}class c extends l{constructor(e,{callBack:t,submit:s}){super(e),this._callBack=t,this._submit=s,this._formElement=this._popup.querySelector(".form"),this._inputList=this._popup.querySelectorAll(".form__input"),this._button=this._popup.querySelector(".form__button"),this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}open(e,t){super.open(),this._cardId=e,this._element=t}changeButtonState(e,t,s){this._button.textContent=e?s:t}_close(){super._close(),this._formElement&&("cardsAddForm"!==this._formElement.id&&"avatarEditForm"!==this._formElement.id||this._formElement.reset())}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submit&&this._submit(this._cardId,this._element),this._callBack&&this._callBack(this._getInputValues()),this._close()}))}}class h{constructor(e,t,{handleCardClick:s,handleLikeClick:i,handleDeleteButtonClick:n},r){this._name=e.name,this._link=e.link,this._templateSelector=t,this._handleCardClick=s,this._handleLikeClick=i,this._handleDeleteButtonClick=n,this._cardId=e._id,this._userId=r,this._ownerId=e.owner._id,this._likes=e.likes}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_setData(){this._cardImage=this._element.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName=this._element.querySelector(".card__title"),this._cardName.textContent=this._name}_isLiked(){let e=!1;return this._likes.forEach((t=>{t._id===this._userId&&(e=!0)})),e}numberOfLikes(e){this._likeCounter=this._element.querySelector(".card__like-counter"),this._likeCounter.textContent=e}_setEventListeners(){this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this._cardId,this._element)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})})),this._cardLike.addEventListener("click",(()=>{this._cardLike.classList.toggle("card__like_active"),this._cardLike.classList.contains("card__like_active")?this._handleLikeClick("PUT",this._cardId):this._handleLikeClick("DELETE",this._cardId)}))}generateCard(){return this._element=this._getTemplate(),this.numberOfLikes(this._likes.length),this._cardLike=this._element.querySelector(".card__like"),this._deleteButton=this._element.querySelector(".card__delete"),this._isLiked()&&this._cardLike.classList.add("card__like_active"),this._userId!==this._ownerId&&this._deleteButton.remove(),this._setData(),this._setEventListeners(),this._element}}const _=new class{constructor(e){this._config=e}_getResponseData(e){return e.ok?e.json():Promise.reject(`Ошибка: ${e.status}`)}getProfile(){return fetch(`${this._config.url}/users/me`,{headers:this._config.headers}).then((e=>this._getResponseData(e)))}getCards(){return fetch(`${this._config.url}/cards`,{headers:this._config.headers}).then((e=>this._getResponseData(e)))}editProfile(e){return fetch(`${this._config.url}/users/me`,{method:"PATCH",headers:this._config.headers,body:JSON.stringify({name:e.name,about:e.about})}).then((e=>this._getResponseData(e)))}addCard(e){return fetch(`${this._config.url}/cards`,{method:"POST",headers:this._config.headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>this._getResponseData(e)))}handleControlLikes(e,t){return fetch(`${this._config.url}/cards/${t}/likes`,{method:e,headers:this._config.headers}).then((e=>this._getResponseData(e)))}deleteCard(e){return fetch(`${this._config.url}/cards/${e}`,{method:"DELETE",headers:this._config.headers}).then((e=>this._getResponseData(e)))}editAvatar(e){return fetch(`${this._config.url}/users/me/avatar`,{method:"PATCH",headers:this._config.headers,body:JSON.stringify({avatar:e})}).then((e=>this._getResponseData(e)))}}({url:"https://nomoreparties.co/v1/cohort-60",headers:{authorization:"0823f3d8-cee4-4f0b-9f88-c1dcbe025215","Content-Type":"application/json"}}),d=new class{constructor({nameSelector:e,aboutUserSelector:t,userSelector:s}){this._name=document.querySelector(e),this._aboutUser=document.querySelector(t),this._userAvatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._aboutUser.textContent}}setUserInfo(e){this._name.textContent=e.name,this._aboutUser.textContent=e.about,this._userAvatar.src=e.avatar,this._userId=e._id}getUserId(){return this._userId}}({nameSelector:".profile__title",aboutUserSelector:".profile__subtitle",userSelector:".profile__avatar"});Promise.all([_.getProfile(),_.getCards()]).then((([e,t])=>{d.setUserInfo(e),m.renderItems(t)})).catch((e=>console.log(`Ошибка: ${e}`)));const u=e=>{const t=new h(e,"#card-template",{handleCardClick:e=>{p.open(e)},handleLikeClick:(e,s)=>{_.handleControlLikes(e,s).then((e=>{t.numberOfLikes(e.likes.length)})).catch((e=>console.log(`Ошибка: ${e}`)))},handleDeleteButtonClick:(e,t)=>{k.open(e,t)}},d.getUserId()),s=t.generateCard();m.addItem(s)},m=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}addItem(e){this._container.append(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{u(e)}},".places"),p=new class extends l{constructor(e){super(e),this._image=this._popup.querySelector(".popup__image"),this._title=this._popup.querySelector(".popup__title"),this.setEventListeners()}open(e){super.open(),this._image.src=e.link,this._image.alt=e.name,this._title.textContent=e.name}}("#popup_photo"),g=new c("#popup_add",{callBack:e=>{g.changeButtonState(!0,"Создать","Создание..."),_.addCard(e).then((e=>{u(e)})).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>g.changeButtonState(!1,"Создать","Создание...")))}}),f=new c("#popup_edit",{callBack:e=>{f.changeButtonState(!0,"Сохранить","Сохранение..."),_.editProfile(e).then((e=>{d.setUserInfo(e)})).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>f.changeButtonState(!1,"Сохранить","Сохранение...")))},submit:null}),k=new c("#popup_delete-card",{callBack:null,submit:(e,t)=>{k.changeButtonState(!0,"Да","Удаление..."),_.deleteCard(e).then((()=>{t.remove()})).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>k.changeButtonState(!1,"Да","Удаление...")))}}),E=new c("#popup_edit-avatar",{callBack:e=>{E.changeButtonState(!0,"Сохранить","Сохранение..."),_.editAvatar(e.link).then((e=>{d.setUserInfo(e)})).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>E.changeButtonState(!1,"Сохранить","Сохранение...")))},submit:null}),S=new e(a,n),v=new e(a,r),L=new e(a,o);t.addEventListener("click",(()=>{const e=d.getUserInfo();f.setInputValues(e),f.open(),v.setState()})),s.addEventListener("click",(()=>{g.open(),S.setButtonState()})),i.addEventListener("click",(()=>{E.open(),L.setButtonState()})),L.enableValidation(),v.enableValidation(),S.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,