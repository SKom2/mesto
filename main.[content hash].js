(()=>{"use strict";class e{constructor(e,t){this._config=e,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector)}_showError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorClass),t.textContent=e.validationMessage}_hideError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}setButtonState(){this._toggleButtonState()}setInputValidity(){this._inputList.forEach((e=>{this._checkInputValidity(e)}))}setState(){this._toggleButtonState(),this.setInputValidity()}enableValidation(){this._setEventListeners()}}const t=document.querySelector("#button_edit"),s=document.querySelector("#button_add"),i=document.querySelector(".profile__edit-avatar"),n=document.querySelector("#cardsAddForm"),r=document.querySelector("#profileEditForm"),o=document.querySelector("#avatarEditForm"),a={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible"};class l{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this._close()}setEventListeners(){this._closeButton=this._popup.querySelector(".popup__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{e.target===this._popup&&this.close()}))}}class c extends l{constructor(e,{callBack:t}){super(e),this._callBack=t,this._formElement=this._popup.querySelector(".form"),this._inputList=this._popup.querySelectorAll(".form__input"),this._button=this._popup.querySelector(".form__button"),this.setEventListeners()}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}changeButtonState(e,t,s){this._button.textContent=e?s:t}close(){super.close(),"cardsAddForm"!==this._formElement.id&&"avatarEditForm"!==this._formElement.id||this._formElement.reset()}setEventListeners(){super.setEventListeners(),this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._callBack(this._getInputValues())}))}}class h{constructor(e,t,{handleCardClick:s,handleLikeClick:i,handleDeleteButtonClick:n},r){this._name=e.name,this._link=e.link,this._templateSelector=t,this._handleCardClick=s,this._handleLikeClick=i,this._handleDeleteButtonClick=n,this._cardId=e._id,this._userId=r,this._ownerId=e.owner._id,this._likes=e.likes,this._isLiked=this._isCardLiked()}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}_setData(){this._cardImage=this._element.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardName=this._element.querySelector(".card__title"),this._cardName.textContent=this._name}_isCardLiked(){let e=!1;return this._likes.forEach((t=>{t._id===this._userId&&(e=!0)})),e}_likeCard(){this._handleLikeClick("PUT",this._cardId)}_unlikeCard(){this._handleLikeClick("DELETE",this._cardId)}_toggleLike(){this._isLiked?this._unlikeCard():this._likeCard()}updateLikes(e){this._likeCounter=this._element.querySelector(".card__like-counter"),this._cardLike=this._element.querySelector(".card__like");let t=!1;e.forEach((e=>{e._id===this._userId&&(t=!0)})),this._isLiked=t,this._isLiked?(this._cardLike.classList.add("card__like_active"),this._isLiked=!0):(this._cardLike.classList.remove("card__like_active"),this._isLiked=!1),this._likeCounter.textContent=e.length}_setEventListeners(){this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButtonClick(this._cardId,this)})),this._cardImage.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})})),this._cardLike=this._element.querySelector(".card__like"),this._cardLike.addEventListener("click",(()=>{this._toggleLike()}))}removeCard(){this._element.remove()}generateCard(){return this._element=this._getTemplate(),this.updateLikes(this._likes),this._deleteButton=this._element.querySelector(".card__delete"),this._isLiked&&this._cardLike.classList.add("card__like_active"),this._userId!==this._ownerId&&this._deleteButton.remove(),this._setData(),this._setEventListeners(),this._element}}const _=new class{constructor(e){this._config=e}_getResponseData(e){return e.ok?e.json():Promise.reject(new Error(`Ошибка: ${e.status}`))}getProfile(){return fetch(`${this._config.url}/users/me`,{headers:this._config.headers}).then((e=>this._getResponseData(e)))}getCards(){return fetch(`${this._config.url}/cards`,{headers:this._config.headers}).then((e=>this._getResponseData(e)))}editProfile(e){return fetch(`${this._config.url}/users/me`,{method:"PATCH",headers:this._config.headers,body:JSON.stringify({name:e.name,about:e.about})}).then((e=>this._getResponseData(e)))}addCard(e){return fetch(`${this._config.url}/cards`,{method:"POST",headers:this._config.headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>this._getResponseData(e)))}handleControlLikes(e,t){return fetch(`${this._config.url}/cards/${t}/likes`,{method:e,headers:this._config.headers}).then((e=>this._getResponseData(e)))}deleteCard(e){return fetch(`${this._config.url}/cards/${e}`,{method:"DELETE",headers:this._config.headers}).then((e=>this._getResponseData(e)))}editAvatar(e){return fetch(`${this._config.url}/users/me/avatar`,{method:"PATCH",headers:this._config.headers,body:JSON.stringify({avatar:e})}).then((e=>this._getResponseData(e)))}}({url:"https://nomoreparties.co/v1/cohort-60",headers:{authorization:"0823f3d8-cee4-4f0b-9f88-c1dcbe025215","Content-Type":"application/json"}}),d=new class{constructor({nameSelector:e,aboutUserSelector:t,userSelector:s}){this._name=document.querySelector(e),this._aboutUser=document.querySelector(t),this._userAvatar=document.querySelector(s)}getUserInfo(){return{name:this._name.textContent,about:this._aboutUser.textContent}}setUserInfo(e){this._name.textContent=e.name,this._aboutUser.textContent=e.about,this._userAvatar.src=e.avatar,this._userId=e._id}getUserId(){return this._userId}}({nameSelector:".profile__title",aboutUserSelector:".profile__subtitle",userSelector:".profile__avatar"});Promise.all([_.getProfile(),_.getCards()]).then((([e,t])=>{d.setUserInfo(e),p.renderItems(t)})).catch((e=>console.log(`Ошибка: ${e}`)));const u=e=>{const t=new h(e,"#card-template",{handleCardClick:e=>{m.open(e)},handleLikeClick:(e,s)=>{_.handleControlLikes(e,s).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(`Ошибка: ${e}`)))},handleDeleteButtonClick:(e,t)=>{f.open(e,t)}},d.getUserId());return t.generateCard()},p=new class{constructor({renderer:e},t){this._renderer=e,this._container=document.querySelector(t)}addItem(e){this._container.prepend(e)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{p.addItem(u(e))}},".places"),m=new class extends l{constructor(e){super(e),this._image=this._popup.querySelector(".popup__image"),this._title=this._popup.querySelector(".popup__title"),this.setEventListeners()}open(e){super.open(),this._image.src=e.link,this._image.alt=e.name,this._title.textContent=e.name}}("#popup_photo"),k=new c("#popup_add",{callBack:e=>{k.changeButtonState(!0,"Создать","Создание..."),_.addCard(e).then((e=>{p.addItem(u(e))})).then((()=>k.close())).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>k.changeButtonState(!1,"Создать","Создание...")))}}),g=new c("#popup_edit",{callBack:e=>{g.changeButtonState(!0,"Сохранить","Сохранение..."),_.editProfile(e).then((e=>{d.setUserInfo(e)})).then((()=>g.close())).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>g.changeButtonState(!1,"Сохранить","Сохранение...")))}}),f=new class extends l{constructor(e,{callBack:t}){super(e),this._callBack=t,this._formElement=this._popup.querySelector(".form"),this._button=this._popup.querySelector(".form__button"),this.setEventListeners()}open(e,t){super.open(),this._cardId=e,this._element=t}changeButtonState(e,t,s){this._button.textContent=e?s:t}setEventListeners(){super.setEventListeners(),this._button.addEventListener("click",(e=>{e.preventDefault(),this._callBack(this._cardId,this._element)}))}}("#popup_delete-card",{callBack:(e,t)=>{f.changeButtonState(!0,"Да","Удаление..."),_.deleteCard(e).then((()=>{t.removeCard()})).then((()=>f.close())).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>f.changeButtonState(!1,"Да","Удаление...")))}}),L=new c("#popup_edit-avatar",{callBack:e=>{L.changeButtonState(!0,"Сохранить","Сохранение..."),_.editAvatar(e.link).then((e=>{d.setUserInfo(e)})).then((()=>L.close())).catch((e=>console.log(`Ошибка: ${e}`))).finally((()=>L.changeButtonState(!1,"Сохранить","Сохранение...")))}}),E=new e(a,n),v=new e(a,r),S=new e(a,o);t.addEventListener("click",(()=>{const e=d.getUserInfo();g.setInputValues(e),g.open(),v.setState()})),s.addEventListener("click",(()=>{k.open(),E.setButtonState()})),i.addEventListener("click",(()=>{L.open(),S.setButtonState()})),S.enableValidation(),v.enableValidation(),E.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FDekIwSSxFQUF5QnpKLFVBQVUsSUFHdkNJLEVBQWVQLGlCQUFpQixTQUFTLEtBQ3JDdUosRUFBc0JySSxPQUN0QnlJLEVBQXNCMUosZ0JBQWdCLElBRzFDTyxFQUFhUixpQkFBaUIsU0FBUyxLQUNuQzBKLEVBQXdCeEksT0FDeEIySSxFQUF3QjVKLGdCQUFnQixJQUk1QzRKLEVBQXdCekosbUJBQ3hCd0osRUFBeUJ4SixtQkFDekJ1SixFQUFzQnZKLGtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm1hdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2NvbmZpZy5pbnB1dFNlbGVjdG9yKSk7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fY29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBfc2hvd0Vycm9yKGlucHV0RWxlbWVudCl7XHJcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xyXG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5lcnJvckNsYXNzKTtcclxuICAgICAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgX2hpZGVFcnJvcihpbnB1dEVsZW1lbnQpe1xyXG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgKTtcclxuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9jb25maWcuZXJyb3JDbGFzcyk7XHJcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpe1xyXG4gICAgICAgIGlmICghaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nob3dFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hpZGVFcnJvcihpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfaGFzSW52YWxpZElucHV0KCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIF90b2dnbGVCdXR0b25TdGF0ZSgpe1xyXG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSl7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKXtcclxuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc2V0QnV0dG9uU3RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKVxyXG4gICAgfVxyXG5cclxuICAgIHNldElucHV0VmFsaWRpdHkoKSB7XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc2V0U3RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKVxyXG4gICAgICAgIHRoaXMuc2V0SW5wdXRWYWxpZGl0eSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZVZhbGlkYXRpb24oKXtcclxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfTtcclxufSIsImV4cG9ydCBjb25zdCBwcm9maWxlRWRpdEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNidXR0b25fZWRpdCcpO1xyXG5leHBvcnQgY29uc3QgcGhvdG9BZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnV0dG9uX2FkZCcpO1xyXG5leHBvcnQgY29uc3QgYXZhdGFyQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYXZhdGFyJylcclxuZXhwb3J0IGNvbnN0IGNhcmRzQWRkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYXJkc0FkZEZvcm0nKTtcclxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9maWxlRWRpdEZvcm0nKTtcclxuZXhwb3J0IGNvbnN0IGF2YXRhckVkaXRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2F2YXRhckVkaXRGb3JtJyk7XHJcbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uQ29uZmlnID0ge1xyXG4gICAgaW5wdXRTZWxlY3RvcjogJy5mb3JtX19pbnB1dCcsXHJcbiAgICBzdWJtaXRCdXR0b25TZWxlY3RvcjogJy5mb3JtX19idXR0b24nLFxyXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogJ2Zvcm1fX2J1dHRvbl9pbmFjdGl2ZScsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6ICdmb3JtX19pbnB1dF90eXBlX2Vycm9yJyxcclxuICAgIGVycm9yQ2xhc3M6ICdmb3JtX19pbnB1dC1lcnJvcl92aXNpYmxlJ1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFwaUNvbmZpZyA9IHtcclxuICAgIHVybDogJ2h0dHBzOi8vbm9tb3JlcGFydGllcy5jby92MS9jb2hvcnQtNjAnLFxyXG4gICAgaGVhZGVyczoge1xyXG4gICAgICAgIGF1dGhvcml6YXRpb246ICcwODIzZjNkOC1jZWU0LTRmMGItOWY4OC1jMWRjYmUwMjUyMTUnLFxyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZUVzY0Nsb3NlID0gdGhpcy5faGFuZGxlRXNjQ2xvc2UuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuKCkge1xyXG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgncG9wdXBfb3BlbmVkJyk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICAgIH1cclxuXHJcbiAgICBfaGFuZGxlRXNjQ2xvc2UoZXZ0KSB7XHJcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKXtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJyk7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKGV2dC50YXJnZXQgPT09IHRoaXMuX3BvcHVwKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge1BvcHVwfSBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCB7Y2FsbEJhY2t9KSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fY2FsbEJhY2sgPSBjYWxsQmFjaztcclxuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudCA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtJyk7XHJcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnLmZvcm1fX2lucHV0Jyk7XHJcbiAgICAgICAgdGhpcy5fYnV0dG9uID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLmZvcm1fX2J1dHRvbicpO1xyXG4gICAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0SW5wdXRWYWx1ZXMoKXtcclxuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBmb3JtRGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBmb3JtRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRJbnB1dFZhbHVlcyhpbnB1dFZhbHVlcykge1xyXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGlucHV0VmFsdWVzW2lucHV0Lm5hbWVdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUJ1dHRvblN0YXRlKGlzTG9hZCwgY3VycmVudFN0YXRlLCBsb2FkaW5nU3RhdGUpIHtcclxuICAgICAgICBpZiAoaXNMb2FkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi50ZXh0Q29udGVudCA9IGxvYWRpbmdTdGF0ZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi50ZXh0Q29udGVudCA9IGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgc3VwZXIuY2xvc2UoKTtcclxuICAgICAgICBpZiAodGhpcy5fZm9ybUVsZW1lbnQuaWQgPT09ICdjYXJkc0FkZEZvcm0nIHx8IHRoaXMuX2Zvcm1FbGVtZW50LmlkID09PSAnYXZhdGFyRWRpdEZvcm0nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8g0KPRgdC70L7QstC40LUg0LTQvtCx0LDQstC70LXQvdC+INC00LvRjyDRgtC+0LPQviDRh9GC0L7QsdGLINCyINC/0L7Qv9Cw0L/QtSDRgNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNGPINC/0YDQvtGE0LjQu9GPINC/0YDQuCDRgdC+0YXRgNCw0L3QtdC90LjQuCDQvdC1INGB0LHRgNCw0YHRi9Cy0LDQu9C40YHRjCDQt9Cw0LTQsNC90L3Ri9C1INC30L3QsNGH0LXQvdC40Y9cclxuXHJcbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcclxuICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGxCYWNrKHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIENhcmQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSwgdGVtcGxhdGVTZWxlY3Rvciwge2hhbmRsZUNhcmRDbGljaywgaGFuZGxlTGlrZUNsaWNrLCBoYW5kbGVEZWxldGVCdXR0b25DbGlja30sIHVzZXJJZCkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgICAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gdGVtcGxhdGVTZWxlY3RvcjtcclxuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrID0gaGFuZGxlTGlrZUNsaWNrO1xyXG4gICAgICAgIHRoaXMuX2hhbmRsZURlbGV0ZUJ1dHRvbkNsaWNrID0gaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2s7XHJcbiAgICAgICAgdGhpcy5fY2FyZElkID0gZGF0YS5faWQ7XHJcbiAgICAgICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHRoaXMuX293bmVySWQgPSBkYXRhLm93bmVyLl9pZDtcclxuICAgICAgICB0aGlzLl9saWtlcyA9IGRhdGEubGlrZXM7XHJcbiAgICAgICAgdGhpcy5faXNMaWtlZCA9IHRoaXMuX2lzQ2FyZExpa2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldFRlbXBsYXRlKCkge1xyXG4gICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcclxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fdGVtcGxhdGVTZWxlY3RvcilcclxuICAgICAgICAgICAgLmNvbnRlbnRcclxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkJylcclxuICAgICAgICAgICAgLmNsb25lTm9kZSh0cnVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIF9zZXREYXRhKCkge1xyXG4gICAgICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2ltYWdlJyk7XHJcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICAgICAgdGhpcy5fY2FyZE5hbWUgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX190aXRsZScpXHJcbiAgICAgICAgdGhpcy5fY2FyZE5hbWUudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIF9pc0NhcmRMaWtlZCgpIHtcclxuICAgICAgICBsZXQgaXNMaWtlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2xpa2VzLmZvckVhY2goKGxpa2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKGxpa2UuX2lkID09PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgICAgICAgICAgIGlzTGlrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gaXNMaWtlZDtcclxuICAgIH1cclxuXHJcbiAgICBfbGlrZUNhcmQoKSB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKCdQVVQnLCB0aGlzLl9jYXJkSWQpXHJcbiAgICB9XHJcblxyXG4gICAgX3VubGlrZUNhcmQoKSB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNsaWNrKCdERUxFVEUnLCB0aGlzLl9jYXJkSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIF90b2dnbGVMaWtlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0xpa2VkKXtcclxuICAgICAgICAgICAgdGhpcy5fdW5saWtlQ2FyZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpa2VDYXJkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUxpa2VzKGxpa2VzKSB7XHJcbiAgICAgICAgdGhpcy5fbGlrZUNvdW50ZXIgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19saWtlLWNvdW50ZXInKTtcclxuICAgICAgICB0aGlzLl9jYXJkTGlrZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UnKTtcclxuXHJcbiAgICAgICAgbGV0IGlzTGlrZWQgPSBmYWxzZTtcclxuICAgICAgICBsaWtlcy5mb3JFYWNoKChsaWtlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChsaWtlLl9pZCA9PT0gdGhpcy5fdXNlcklkKSB7XHJcbiAgICAgICAgICAgICAgICBpc0xpa2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5faXNMaWtlZCA9IGlzTGlrZWQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pc0xpa2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhcmRMaWtlLmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2xpa2VfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzTGlrZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhcmRMaWtlLmNsYXNzTGlzdC5yZW1vdmUoJ2NhcmRfX2xpa2VfYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzTGlrZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbGlrZUNvdW50ZXIudGV4dENvbnRlbnQgPSBsaWtlcy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2sodGhpcy5fY2FyZElkLCB0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHsgbmFtZTogdGhpcy5fbmFtZSwgbGluazogdGhpcy5fbGluayB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9jYXJkTGlrZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UnKTtcclxuICAgICAgICB0aGlzLl9jYXJkTGlrZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlTGlrZSgpXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDYXJkKCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTGlrZXModGhpcy5fbGlrZXMpXHJcbiAgICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fZGVsZXRlJyk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzTGlrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2FyZExpa2UuY2xhc3NMaXN0LmFkZCgnY2FyZF9fbGlrZV9hY3RpdmUnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdXNlcklkICE9PSB0aGlzLl9vd25lcklkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2V0RGF0YSgpO1xyXG4gICAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHtGb3JtVmFsaWRhdG9yfSBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgICBhcGlDb25maWcsXHJcbiAgICBhdmF0YXJCdXR0b24sXHJcbiAgICBhdmF0YXJFZGl0Rm9ybSxcclxuICAgIGNhcmRzQWRkRm9ybSxcclxuICAgIHBob3RvQWRkQnV0dG9uLFxyXG4gICAgcHJvZmlsZUVkaXRCdXR0b24sXHJcbiAgICBwcm9maWxlRWRpdEZvcm0sXHJcbiAgICB2YWxpZGF0aW9uQ29uZmlnXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5pbXBvcnQge0FwaX0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQXBpLmpzXCI7XHJcbmltcG9ydCB7UG9wdXBXaXRoSW1hZ2V9IGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlXCI7XHJcbmltcG9ydCB7UG9wdXBXaXRoRm9ybX0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQge1BvcHVwV2l0aENvbmZpcm1hdGlvbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzXCI7XHJcbmltcG9ydCB7VXNlckluZm99IGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7U2VjdGlvbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xyXG5pbXBvcnQge0NhcmR9IGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmRcIjtcclxuaW1wb3J0ICcuL2luZGV4LmNzcydcclxuXHJcbmNvbnN0IGFwaSA9IG5ldyBBcGkoYXBpQ29uZmlnKTtcclxuXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICAgIG5hbWVTZWxlY3RvcjogJy5wcm9maWxlX190aXRsZScsXHJcbiAgICBhYm91dFVzZXJTZWxlY3RvcjogJy5wcm9maWxlX19zdWJ0aXRsZScsXHJcbiAgICB1c2VyU2VsZWN0b3I6ICcucHJvZmlsZV9fYXZhdGFyJ1xyXG59KTtcclxuXHJcblByb21pc2UuYWxsKFthcGkuZ2V0UHJvZmlsZSgpLCBhcGkuZ2V0Q2FyZHMoKV0pXHJcbiAgICAudGhlbigoW3VzZXJEYXRhLCBjYXJkc0RhdGFdKSA9PiB7XHJcbiAgICAgICAgdXNlckluZm8uc2V0VXNlckluZm8odXNlckRhdGEpO1xyXG4gICAgICAgIGNhcmRMaXN0LnJlbmRlckl0ZW1zKGNhcmRzRGF0YSk7XHJcbn0pXHJcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyfWApKVxyXG5cclxuXHJcbmNvbnN0IHJlbmRlckNhcmQgPSAoaXRlbSkgPT4ge1xyXG4gICAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKGl0ZW0sICcjY2FyZC10ZW1wbGF0ZScsIHtcclxuICAgICAgICBoYW5kbGVDYXJkQ2xpY2s6IChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHBvcHVwV2l0aEltYWdlLm9wZW4oZGF0YSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYW5kbGVMaWtlQ2xpY2s6IChyZXF1ZXN0LCBjYXJkSWQpID0+IHtcclxuICAgICAgICAgICAgYXBpLmhhbmRsZUNvbnRyb2xMaWtlcyhyZXF1ZXN0LCBjYXJkSWQpXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZC51cGRhdGVMaWtlcyhyZXMubGlrZXMpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJ9YCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2s6IChjYXJkSWQsIGNhcmQpID0+IHtcclxuICAgICAgICAgICAgcG9wdXBXaXRoRGVsZXRpb25Db25maXJtYXRpb25Gb3JtLm9wZW4oY2FyZElkLCBjYXJkKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgICAgIHVzZXJJbmZvLmdldFVzZXJJZCgpXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIGNhcmQuZ2VuZXJhdGVDYXJkKCk7XHJcbn1cclxuXHJcbmNvbnN0IGNhcmRMaXN0ID0gbmV3IFNlY3Rpb24gKHtcclxuICAgIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNhcmRMaXN0LmFkZEl0ZW0ocmVuZGVyQ2FyZChpdGVtKSk7XHJcbiAgICB9XHJcblxyXG59LCAnLnBsYWNlcycpO1xyXG5cclxuY29uc3QgcG9wdXBXaXRoSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoJyNwb3B1cF9waG90bycpO1xyXG5cclxuY29uc3QgcG9wdXBXaXRoQWRkUGhvdG9Gb3JtID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNwb3B1cF9hZGQnLCB7XHJcbiAgICBjYWxsQmFjazogKGl0ZW0pID0+IHtcclxuICAgICAgICBwb3B1cFdpdGhBZGRQaG90b0Zvcm0uY2hhbmdlQnV0dG9uU3RhdGUodHJ1ZSwgJ9Ch0L7Qt9C00LDRgtGMJywgJ9Ch0L7Qt9C00LDQvdC40LUuLi4nKTtcclxuICAgICAgICBhcGkuYWRkQ2FyZChpdGVtKVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYXJkTGlzdC5hZGRJdGVtKHJlbmRlckNhcmQocmVzKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHBvcHVwV2l0aEFkZFBob3RvRm9ybS5jbG9zZSgpKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyfWApKVxyXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBwb3B1cFdpdGhBZGRQaG90b0Zvcm0uY2hhbmdlQnV0dG9uU3RhdGUoZmFsc2UsICfQodC+0LfQtNCw0YLRjCcsICfQodC+0LfQtNCw0L3QuNC1Li4uJykpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IHBvcHVwV2l0aEVkaXRQcm9maWxlRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcG9wdXBfZWRpdCcsIHtcclxuICAgIGNhbGxCYWNrOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgIHBvcHVwV2l0aEVkaXRQcm9maWxlRm9ybS5jaGFuZ2VCdXR0b25TdGF0ZSh0cnVlLCAn0KHQvtGF0YDQsNC90LjRgtGMJywgJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJyk7XHJcbiAgICAgICAgYXBpLmVkaXRQcm9maWxlKGRhdGEpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHJlcyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHBvcHVwV2l0aEVkaXRQcm9maWxlRm9ybS5jbG9zZSgpKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGDQntGI0LjQsdC60LA6ICR7ZXJyfWApKVxyXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiBwb3B1cFdpdGhFZGl0UHJvZmlsZUZvcm0uY2hhbmdlQnV0dG9uU3RhdGUoZmFsc2UsICfQodC+0YXRgNCw0L3QuNGC0YwnLCAn0KHQvtGF0YDQsNC90LXQvdC40LUuLi4nKSlcclxuICAgIH0sXHJcbn0pO1xyXG5cclxuY29uc3QgcG9wdXBXaXRoRGVsZXRpb25Db25maXJtYXRpb25Gb3JtID0gbmV3IFBvcHVwV2l0aENvbmZpcm1hdGlvbignI3BvcHVwX2RlbGV0ZS1jYXJkJywge1xyXG4gICAgY2FsbEJhY2s6IChjYXJkSWQsIGNhcmQpID0+IHtcclxuICAgICAgICBwb3B1cFdpdGhEZWxldGlvbkNvbmZpcm1hdGlvbkZvcm0uY2hhbmdlQnV0dG9uU3RhdGUodHJ1ZSwgJ9CU0LAnLCAn0KPQtNCw0LvQtdC90LjQtS4uLicpXHJcbiAgICAgICAgYXBpLmRlbGV0ZUNhcmQoY2FyZElkKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYXJkLnJlbW92ZUNhcmQoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gcG9wdXBXaXRoRGVsZXRpb25Db25maXJtYXRpb25Gb3JtLmNsb3NlKCkpXHJcbiAgICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coYNCe0YjQuNCx0LrQsDogJHtlcnJ9YCkpXHJcbiAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHBvcHVwV2l0aERlbGV0aW9uQ29uZmlybWF0aW9uRm9ybS5jaGFuZ2VCdXR0b25TdGF0ZShmYWxzZSwgJ9CU0LAnLCAn0KPQtNCw0LvQtdC90LjQtS4uLicpKVxyXG4gICAgfSxcclxufSk7XHJcblxyXG5jb25zdCBwb3B1cFdpdGhFZGl0QXZhdGFyRm9ybSA9IG5ldyBQb3B1cFdpdGhGb3JtKCcjcG9wdXBfZWRpdC1hdmF0YXInLCB7XHJcbiAgICBjYWxsQmFjazogKGRhdGEpID0+IHtcclxuICAgICAgICBwb3B1cFdpdGhFZGl0QXZhdGFyRm9ybS5jaGFuZ2VCdXR0b25TdGF0ZSh0cnVlLCAn0KHQvtGF0YDQsNC90LjRgtGMJywgJ9Ch0L7RhdGA0LDQvdC10L3QuNC1Li4uJylcclxuICAgICAgICBhcGkuZWRpdEF2YXRhcihkYXRhLmxpbmspXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHJlcylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4gcG9wdXBXaXRoRWRpdEF2YXRhckZvcm0uY2xvc2UoKSlcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhg0J7RiNC40LHQutCwOiAke2Vycn1gKSlcclxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4gcG9wdXBXaXRoRWRpdEF2YXRhckZvcm0uY2hhbmdlQnV0dG9uU3RhdGUoZmFsc2UsICfQodC+0YXRgNCw0L3QuNGC0YwnLCAn0KHQvtGF0YDQsNC90LXQvdC40LUuLi4nKSlcclxuICAgIH0sXHJcbn0pXHJcblxyXG5jb25zdCBjYXJkc0FkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBjYXJkc0FkZEZvcm0pO1xyXG5jb25zdCBlZGl0UHJvZmlsZUZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcih2YWxpZGF0aW9uQ29uZmlnLCBwcm9maWxlRWRpdEZvcm0pO1xyXG5jb25zdCBlZGl0QXZhdGFyRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRpb25Db25maWcsIGF2YXRhckVkaXRGb3JtKTtcclxuXHJcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB1c2VySW5mby5nZXRVc2VySW5mbygpO1xyXG4gICAgcG9wdXBXaXRoRWRpdFByb2ZpbGVGb3JtLnNldElucHV0VmFsdWVzKGlucHV0VmFsdWVzKTtcclxuICAgIHBvcHVwV2l0aEVkaXRQcm9maWxlRm9ybS5vcGVuKCk7XHJcbiAgICBlZGl0UHJvZmlsZUZvcm1WYWxpZGF0b3Iuc2V0U3RhdGUoKTtcclxufSk7XHJcblxyXG5waG90b0FkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHBvcHVwV2l0aEFkZFBob3RvRm9ybS5vcGVuKCk7XHJcbiAgICBjYXJkc0FkZEZvcm1WYWxpZGF0b3Iuc2V0QnV0dG9uU3RhdGUoKTtcclxufSlcclxuXHJcbmF2YXRhckJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIHBvcHVwV2l0aEVkaXRBdmF0YXJGb3JtLm9wZW4oKTtcclxuICAgIGVkaXRBdmF0YXJGb3JtVmFsaWRhdG9yLnNldEJ1dHRvblN0YXRlKCk7XHJcbn0pXHJcblxyXG5cclxuZWRpdEF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5lZGl0UHJvZmlsZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5jYXJkc0FkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4iLCJleHBvcnQgY2xhc3MgQXBpIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0UmVzcG9uc2VEYXRhKHJlcykge1xyXG4gICAgICAgIGlmIChyZXMub2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvZmlsZSgpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fY29uZmlnLnVybH0vdXNlcnMvbWVgLCB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9jb25maWcuaGVhZGVyc1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2FyZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2NvbmZpZy51cmx9L2NhcmRzYCwge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9jb25maWcuaGVhZGVyc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgfVxyXG4gICAgZWRpdFByb2ZpbGUoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9jb25maWcudXJsfS91c2Vycy9tZWAsICAgIHtcclxuICAgICAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9jb25maWcuaGVhZGVycyxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgYWJvdXQ6IGRhdGEuYWJvdXRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSlcclxuICAgIH1cclxuXHJcbiAgICBhZGRDYXJkKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fY29uZmlnLnVybH0vY2FyZHNgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9jb25maWcuaGVhZGVycyxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogIGRhdGEubmFtZSxcclxuICAgICAgICAgICAgICAgIGxpbms6IGRhdGEubGlua1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgfVxyXG4gICAgaGFuZGxlQ29udHJvbExpa2VzKHJlcXVlc3QsIGNhcmRJZCl7XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2NvbmZpZy51cmx9L2NhcmRzLyR7Y2FyZElkfS9saWtlc2AsIHtcclxuICAgICAgICAgICAgbWV0aG9kOiByZXF1ZXN0LFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9jb25maWcuaGVhZGVycyxcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB0aGlzLl9nZXRSZXNwb25zZURhdGEocmVzKSlcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9jb25maWcudXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2NvbmZpZy5oZWFkZXJzLFxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgfVxyXG5cclxuICAgIGVkaXRBdmF0YXIobGluaykge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9jb25maWcudXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XHJcbiAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcclxuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5fY29uZmlnLmhlYWRlcnMsXHJcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgIGF2YXRhcjogbGlua1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHRoaXMuX2dldFJlc3BvbnNlRGF0YShyZXMpKVxyXG4gICAgfVxyXG59IiwiXHJcblxyXG5leHBvcnQgY2xhc3MgVXNlckluZm8ge1xyXG4gICAgY29uc3RydWN0b3IoeyBuYW1lU2VsZWN0b3IsIGFib3V0VXNlclNlbGVjdG9yLCB1c2VyU2VsZWN0b3IgfSkge1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fYWJvdXRVc2VyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhYm91dFVzZXJTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5fdXNlckF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodXNlclNlbGVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySW5mbyAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCwgYWJvdXQ6IHRoaXMuX2Fib3V0VXNlci50ZXh0Q29udGVudCB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VXNlckluZm8gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgICAgIHRoaXMuX2Fib3V0VXNlci50ZXh0Q29udGVudCA9IGRhdGEuYWJvdXQ7XHJcbiAgICAgICAgdGhpcy5fdXNlckF2YXRhci5zcmMgPSBkYXRhLmF2YXRhcjtcclxuICAgICAgICB0aGlzLl91c2VySWQgPSBkYXRhLl9pZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRVc2VySWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJJZDtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBTZWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKHsgcmVuZGVyZXIgfSwgY29udGFpbmVyU2VsZWN0b3Ipe1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySXRlbXMoY2FyZHMpe1xyXG4gICAgICAgIGNhcmRzLmZvckVhY2goKGNhcmQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIoY2FyZCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSIsImltcG9ydCB7UG9wdXB9IGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICAgICAgdGhpcy5faW1hZ2UgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlJyk7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX3RpdGxlJyk7XHJcbiAgICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW4oZGF0YSkge1xyXG4gICAgICAgIHN1cGVyLm9wZW4oKTtcclxuICAgICAgICB0aGlzLl9pbWFnZS5zcmMgPSBkYXRhLmxpbms7XHJcbiAgICAgICAgdGhpcy5faW1hZ2UuYWx0ID0gZGF0YS5uYW1lO1xyXG4gICAgICAgIHRoaXMuX3RpdGxlLnRleHRDb250ZW50ID0gZGF0YS5uYW1lO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHtQb3B1cH0gZnJvbSBcIi4vUG9wdXBcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhDb25maXJtYXRpb24gZXh0ZW5kcyBQb3B1cHtcclxuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIHtjYWxsQmFja30pIHtcclxuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgICAgICB0aGlzLl9jYWxsQmFjayA9IGNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLmZvcm0nKTtcclxuICAgICAgICB0aGlzLl9idXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fYnV0dG9uJyk7XHJcbiAgICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG4gICAgfVxyXG4gICAgb3BlbihjYXJkSWQsIGVsZW1lbnQpIHtcclxuICAgICAgICBzdXBlci5vcGVuKCk7XHJcbiAgICAgICAgdGhpcy5fY2FyZElkID0gY2FyZElkO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUJ1dHRvblN0YXRlKGlzTG9hZCwgY3VycmVudFN0YXRlLCBsb2FkaW5nU3RhdGUpIHtcclxuICAgICAgICBpZiAoaXNMb2FkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi50ZXh0Q29udGVudCA9IGxvYWRpbmdTdGF0ZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi50ZXh0Q29udGVudCA9IGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7XHJcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsQmFjayh0aGlzLl9jYXJkSWQsIHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iXSwibmFtZXMiOlsiRm9ybVZhbGlkYXRvciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiZm9ybUVsZW1lbnQiLCJ0aGlzIiwiX2NvbmZpZyIsIl9mb3JtRWxlbWVudCIsIl9pbnB1dExpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9idXR0b25FbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX3Nob3dFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yRWxlbWVudCIsImlkIiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5wdXRFcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsInRleHRDb250ZW50IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfaGlkZUVycm9yIiwicmVtb3ZlIiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGFzSW52YWxpZElucHV0Iiwic29tZSIsIl90b2dnbGVCdXR0b25TdGF0ZSIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJkaXNhYmxlZCIsIl9zZXRFdmVudExpc3RlbmVycyIsImZvckVhY2giLCJhZGRFdmVudExpc3RlbmVyIiwic2V0QnV0dG9uU3RhdGUiLCJzZXRJbnB1dFZhbGlkaXR5Iiwic2V0U3RhdGUiLCJlbmFibGVWYWxpZGF0aW9uIiwicHJvZmlsZUVkaXRCdXR0b24iLCJkb2N1bWVudCIsInBob3RvQWRkQnV0dG9uIiwiYXZhdGFyQnV0dG9uIiwiY2FyZHNBZGRGb3JtIiwicHJvZmlsZUVkaXRGb3JtIiwiYXZhdGFyRWRpdEZvcm0iLCJ2YWxpZGF0aW9uQ29uZmlnIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsIm9wZW4iLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJrZXkiLCJfY2xvc2UiLCJzZXRFdmVudExpc3RlbmVycyIsIl9jbG9zZUJ1dHRvbiIsInRhcmdldCIsIlBvcHVwV2l0aEZvcm0iLCJjYWxsQmFjayIsInN1cGVyIiwiX2NhbGxCYWNrIiwiX2J1dHRvbiIsIl9nZXRJbnB1dFZhbHVlcyIsImZvcm1EYXRhIiwiaW5wdXQiLCJuYW1lIiwidmFsdWUiLCJzZXRJbnB1dFZhbHVlcyIsImlucHV0VmFsdWVzIiwiY2hhbmdlQnV0dG9uU3RhdGUiLCJpc0xvYWQiLCJjdXJyZW50U3RhdGUiLCJsb2FkaW5nU3RhdGUiLCJyZXNldCIsInByZXZlbnREZWZhdWx0IiwiQ2FyZCIsImRhdGEiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiaGFuZGxlQ2FyZENsaWNrIiwiaGFuZGxlTGlrZUNsaWNrIiwiaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2siLCJ1c2VySWQiLCJfbmFtZSIsIl9saW5rIiwibGluayIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVMaWtlQ2xpY2siLCJfaGFuZGxlRGVsZXRlQnV0dG9uQ2xpY2siLCJfY2FyZElkIiwiX2lkIiwiX3VzZXJJZCIsIl9vd25lcklkIiwib3duZXIiLCJfbGlrZXMiLCJsaWtlcyIsIl9pc0xpa2VkIiwiX2lzQ2FyZExpa2VkIiwiX2dldFRlbXBsYXRlIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9zZXREYXRhIiwiX2NhcmRJbWFnZSIsIl9lbGVtZW50Iiwic3JjIiwiYWx0IiwiX2NhcmROYW1lIiwiaXNMaWtlZCIsImxpa2UiLCJfbGlrZUNhcmQiLCJfdW5saWtlQ2FyZCIsIl90b2dnbGVMaWtlIiwidXBkYXRlTGlrZXMiLCJfbGlrZUNvdW50ZXIiLCJfY2FyZExpa2UiLCJsZW5ndGgiLCJfZGVsZXRlQnV0dG9uIiwicmVtb3ZlQ2FyZCIsImdlbmVyYXRlQ2FyZCIsImFwaSIsIl9nZXRSZXNwb25zZURhdGEiLCJyZXMiLCJvayIsImpzb24iLCJQcm9taXNlIiwicmVqZWN0IiwiRXJyb3IiLCJzdGF0dXMiLCJnZXRQcm9maWxlIiwiZmV0Y2giLCJ1cmwiLCJoZWFkZXJzIiwidGhlbiIsImdldENhcmRzIiwiZWRpdFByb2ZpbGUiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImFib3V0IiwiYWRkQ2FyZCIsImhhbmRsZUNvbnRyb2xMaWtlcyIsInJlcXVlc3QiLCJjYXJkSWQiLCJkZWxldGVDYXJkIiwiZWRpdEF2YXRhciIsImF2YXRhciIsImF1dGhvcml6YXRpb24iLCJ1c2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImFib3V0VXNlclNlbGVjdG9yIiwidXNlclNlbGVjdG9yIiwiX2Fib3V0VXNlciIsIl91c2VyQXZhdGFyIiwiZ2V0VXNlckluZm8iLCJzZXRVc2VySW5mbyIsImdldFVzZXJJZCIsImFsbCIsInVzZXJEYXRhIiwiY2FyZHNEYXRhIiwiY2FyZExpc3QiLCJyZW5kZXJJdGVtcyIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsInJlbmRlckNhcmQiLCJpdGVtIiwiY2FyZCIsInBvcHVwV2l0aEltYWdlIiwicG9wdXBXaXRoRGVsZXRpb25Db25maXJtYXRpb25Gb3JtIiwicmVuZGVyZXIiLCJjb250YWluZXJTZWxlY3RvciIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJhZGRJdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJjYXJkcyIsIl9pbWFnZSIsIl90aXRsZSIsInBvcHVwV2l0aEFkZFBob3RvRm9ybSIsImZpbmFsbHkiLCJwb3B1cFdpdGhFZGl0UHJvZmlsZUZvcm0iLCJwb3B1cFdpdGhFZGl0QXZhdGFyRm9ybSIsImNhcmRzQWRkRm9ybVZhbGlkYXRvciIsImVkaXRQcm9maWxlRm9ybVZhbGlkYXRvciIsImVkaXRBdmF0YXJGb3JtVmFsaWRhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==